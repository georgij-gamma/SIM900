;#include <mega8.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <m8_128.h>
;#include <stdio.h>
;#include <string.h>
;// #define:
;#define status_SIM PINB.0 // in
;#define pwrkey PORTB.1    // out
;#define check 0
;#define open  1
;#define crash 2
;#define cln   3
;#define read  1
;#define write 0
;#define pin_1 1
;#define pin_2 2
;#define pin_3 3
;#define pin_4 4
;#define pin_5 5
;#define pin_6 6
;#define in    0
;#define out   1
;#define low   0
;#define high  1
;
;#define TOIE1    2 // Timer1
;#define TXEN     3 // UART TX enable
;
;#ifndef RXB8
;#define RXB8 1
;#endif
;
;#ifndef TXB8
;#define TXB8 0
;#endif
;
;#ifndef UPE
;#define UPE 2
;#endif
;
;#ifndef DOR
;#define DOR 3
;#endif
;
;#ifndef FE
;#define FE 4
;#endif
;
;#ifndef UDRE
;#define UDRE 5
;#endif
;
;#ifndef RXC
;#define RXC 7
;#endif
;
;#define FRAMING_ERROR (1<<FE)
;#define PARITY_ERROR (1<<UPE)
;#define DATA_OVERRUN (1<<DOR)
;#define DATA_REGISTER_EMPTY (1<<UDRE)
;#define RX_COMPLETE (1<<RXC)
;
;// USART Receiver buffer
;#define RX_BUFFER_SIZE 100
;char rx_buffer[RX_BUFFER_SIZE];
;
;volatile static struct {u8 flag;    // Номер флага в флаговом байте
;                        u16 count;} // Выдержка
;                        Timer[4];// Очередь таймеров
;
;u8 text[11],get_phone[13],get_ready[6],buff[3],symb,iniflag = 1;
;u8 Numb = 4,sim900=0,ATflag=1,push, pin;
;bit state = 1,first = 1,fst=1,once_open=1,once_crash=1;
;//u8 OK[]="OK";  buffer[3],
;__eeprom u8 alarm = 0;
;__flash u8 my_phone[] = "+79098450953"; // - наш телефон;   +79842837204
;__flash u8 service[] = "+79037011111";  // телефон сервис-центра смс
;__flash u8 Ready[] = "Ready";           // успешная ини sim900
;__flash u8 start[] = "03";              // завести
;__flash u8 stop[] = "04";               // заглушить
;__flash u8 unlock[] = "02";             // разблок.
;__flash u8 lock[] = "01";               // заблок.
;__flash u8 open_door[] = "door_open";
;__flash u8 crash_door[] = "crash_sens";
;__flash u8 error_cmd[] = "error_cmd";
;__flash u8 car_lock[] = "car_lock";
;__flash u8 car_unlock[] = "car_unlock";
;
;#if RX_BUFFER_SIZE <= 256
;unsigned char rx_wr_index,rx_rd_index,rx_counter;
;#else
;unsigned int rx_wr_index,rx_rd_index,rx_counter;
;#endif
;
;// This flag is set on USART Receiver buffer overflow
;bit rx_buffer_overflow;
;
;interrupt [TIM1_OVF] void timer1_ovf_isr(void) {u8 i;
; 0000 0061 interrupt [9] void timer1_ovf_isr(void) {unsigned char     i;

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0062 for(i=0;i!=Numb;i++){     // Прочесываем очередь таймеров
;PCODE: $0000000F VOL: 0
;	i -> R17
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0063   	 //if(Timer[i].flag == 0) continue; // Если нашли пустышку - следующая итерация
; 0000 0064 	 if(Timer[i].count !=0) {   // Если таймер не выщелкал, то щелкаем еще раз.
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
; 0000 0065         Timer[i].count --;	// Уменьшаем число в ячейке если не конец.
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
;PCODE: $00000025 VOL: 0
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
;PCODE: $00000028 VOL: 0
; 0000 0066       	                    }
; 0000 0067 
; 0000 0068    	 else {
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
; 0000 0069           Timer[i].flag = 0 ;   // Дощелкали до нуля? Сбрасываем флаг в флаговом байте
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
;PCODE: $0000002F VOL: 0
; 0000 006A           if((Timer[0].flag == 0)&&(Timer[1].flag == 0)&&
; 0000 006B           (Timer[2].flag == 0)&&(Timer[3].flag == 0)) {TIMSK &= ~(1<<TOIE1);} // Timer1 off
;PCODE: $00000030 VOL: 1
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 1
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 1
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 1
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 006C       	  }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 006D    	                }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
; 0000 006E  //TIMER1 has overflowed
; 0000 006F  TCNT1H = 0xFE; //setup
;PCODE: $0000004D VOL: 0
;PCODE: $0000004E VOL: 0
; 0000 0070  TCNT1L = 0x24;
;PCODE: $0000004F VOL: 0
;PCODE: $00000050 VOL: 0
; 0000 0071                                                }
;PCODE: $00000051 VOL: 0
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
;PCODE: $00000054 VOL: 0
;// USART Receiver interrupt service routine
;interrupt [USART_RXC] void usart_rx_isr(void) {
; 0000 0073 interrupt [12] void usart_rx_isr(void) {
;PCODE: $00000055 VOL: 0
;PCODE: $00000056 VOL: 0
; 0000 0074     char status, data;
; 0000 0075     status=UCSRA;
;PCODE: $00000057 VOL: 0
;	status -> R17
;	data -> R16
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0076     data=UDR;
;PCODE: $0000005A VOL: 0
;PCODE: $0000005B VOL: 0
; 0000 0077     if ((status & (FRAMING_ERROR | PARITY_ERROR | DATA_OVERRUN))==0) {
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
;PCODE: $0000005E VOL: 0
; 0000 0078         rx_buffer[rx_wr_index]=data;
;PCODE: $0000005F VOL: 0
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0079         if (++rx_wr_index == RX_BUFFER_SIZE) {
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
; 0000 007A             rx_wr_index=0;
;PCODE: $00000067 VOL: 0
; 0000 007B                                              };
;PCODE: $00000068 VOL: 0
; 0000 007C         if (++rx_counter == RX_BUFFER_SIZE) {
;PCODE: $00000069 VOL: 0
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
;PCODE: $0000006C VOL: 0
; 0000 007D             rx_counter=0;
;PCODE: $0000006D VOL: 0
; 0000 007E             rx_buffer_overflow=1;
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
;PCODE: $00000070 VOL: 0
; 0000 007F                                             };
;PCODE: $00000071 VOL: 0
; 0000 0080                                                                      };
;PCODE: $00000072 VOL: 0
; 0000 0081                                               }
;PCODE: $00000073 VOL: 0
;PCODE: $00000074 VOL: 0
;PCODE: $00000075 VOL: 0
;PCODE: $00000076 VOL: 0
;
;#ifndef _DEBUG_TERMINAL_IO_
;// Get a character from the USART Receiver buffer
;#define _ALTERNATE_GETCHAR_
;#pragma used+
;char getchar(void){
; 0000 0087 char getchar(void){
;PCODE: $00000077 VOL: 0
;PCODE: $00000078 VOL: 0
; 0000 0088 char data;
; 0000 0089 if (rx_counter==0);
;PCODE: $00000079 VOL: 0
;	data -> R17
;PCODE: $0000007A VOL: 0
;PCODE: $0000007B VOL: 0
; 0000 008A data=rx_buffer[rx_rd_index++];
;PCODE: $0000007C VOL: 0
;PCODE: $0000007D VOL: 0
;PCODE: $0000007E VOL: 0
;PCODE: $0000007F VOL: 0
;PCODE: $00000080 VOL: 0
;PCODE: $00000081 VOL: 0
; 0000 008B #if RX_BUFFER_SIZE != 256
; 0000 008C if (rx_rd_index == RX_BUFFER_SIZE) rx_rd_index=0;
;PCODE: $00000082 VOL: 0
;PCODE: $00000083 VOL: 0
;PCODE: $00000084 VOL: 0
;PCODE: $00000085 VOL: 0
; 0000 008D #endif
; 0000 008E #asm("cli")
;PCODE: $00000086 VOL: 0
;PCODE: $00000087 VOL: 0
	cli
;PCODE: $00000088 VOL: 0
; 0000 008F --rx_counter;
;PCODE: $00000089 VOL: 0
; 0000 0090 #asm("sei")
;PCODE: $0000008A VOL: 0
	sei
;PCODE: $0000008B VOL: 0
; 0000 0091 return data;
;PCODE: $0000008C VOL: 0
;PCODE: $0000008D VOL: 0
;PCODE: $0000008E VOL: 0
; 0000 0092                   }
;PCODE: $0000008F VOL: 0
;#pragma used-
;#endif
;// Declare your global variables here
;void ini_avr(void){
; 0000 0096 void ini_avr(void){
;PCODE: $00000090 VOL: 0
;PCODE: $00000091 VOL: 0
; 0000 0097 // Declare your local variables here
; 0000 0098 
; 0000 0099 // Input/Output Ports initialization
; 0000 009A // Port B initialization
; 0000 009B // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 009C // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 009D PORTB=0x00;
;PCODE: $00000092 VOL: 0
;PCODE: $00000093 VOL: 0
; 0000 009E DDRB=0x02;
;PCODE: $00000094 VOL: 0
;PCODE: $00000095 VOL: 0
; 0000 009F 
; 0000 00A0 // Port C initialization
; 0000 00A1 // Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A2 // State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A3 PORTC=0x00;
;PCODE: $00000096 VOL: 0
;PCODE: $00000097 VOL: 0
; 0000 00A4 DDRC=0x00;
;PCODE: $00000098 VOL: 0
;PCODE: $00000099 VOL: 0
; 0000 00A5 
; 0000 00A6 // Port D initialization
; 0000 00A7 // Func7=In Func6=In Func5=In Func4=In Func3=In Func2=In Func1=In Func0=In
; 0000 00A8 // State7=T State6=T State5=T State4=T State3=T State2=T State1=T State0=T
; 0000 00A9 PORTD=0x00;
;PCODE: $0000009A VOL: 0
;PCODE: $0000009B VOL: 0
; 0000 00AA DDRD=0x00;
;PCODE: $0000009C VOL: 0
;PCODE: $0000009D VOL: 0
; 0000 00AB 
; 0000 00AC // Timer/Counter 0 initialization
; 0000 00AD // Clock source: System Clock
; 0000 00AE // Clock value: Timer 0 Stopped
; 0000 00AF TCCR0=0x00;
;PCODE: $0000009E VOL: 0
;PCODE: $0000009F VOL: 0
; 0000 00B0 TCNT0=0x00;
;PCODE: $000000A0 VOL: 0
;PCODE: $000000A1 VOL: 0
; 0000 00B1 
; 0000 00B2 //TIMER1 initialize - prescale:8
; 0000 00B3 // WGM: 0) Normal, TOP=0xFFFF
; 0000 00B4 // desired value: 1000Hz
; 0000 00B5 // actual value: 1000,000Hz (0,0%)
; 0000 00B6  TCCR1B = 0x00; //stop
;PCODE: $000000A2 VOL: 0
;PCODE: $000000A3 VOL: 0
; 0000 00B7  TCNT1H = 0xFE; //setup
;PCODE: $000000A4 VOL: 0
;PCODE: $000000A5 VOL: 0
; 0000 00B8  TCNT1L = 0x24;
;PCODE: $000000A6 VOL: 0
;PCODE: $000000A7 VOL: 0
; 0000 00B9  OCR1AH = 0x01;
;PCODE: $000000A8 VOL: 0
;PCODE: $000000A9 VOL: 0
; 0000 00BA  OCR1AL = 0xDC;
;PCODE: $000000AA VOL: 0
;PCODE: $000000AB VOL: 0
; 0000 00BB  OCR1BH = 0x01;
;PCODE: $000000AC VOL: 0
;PCODE: $000000AD VOL: 0
; 0000 00BC  OCR1BL = 0xDC;
;PCODE: $000000AE VOL: 0
;PCODE: $000000AF VOL: 0
; 0000 00BD  ICR1H  = 0x01;
;PCODE: $000000B0 VOL: 0
;PCODE: $000000B1 VOL: 0
; 0000 00BE  ICR1L  = 0xDC;
;PCODE: $000000B2 VOL: 0
;PCODE: $000000B3 VOL: 0
; 0000 00BF  TCCR1A = 0x00;
;PCODE: $000000B4 VOL: 0
;PCODE: $000000B5 VOL: 0
; 0000 00C0  TCCR1B = 0x02; //start Timer
;PCODE: $000000B6 VOL: 0
;PCODE: $000000B7 VOL: 0
; 0000 00C1 
; 0000 00C2 // Timer/Counter 2 initialization
; 0000 00C3 // Clock source: System Clock
; 0000 00C4 // Clock value: Timer2 Stopped
; 0000 00C5 // Mode: Normal top=0xFF
; 0000 00C6 // OC2 output: Disconnected
; 0000 00C7 ASSR=0x00;
;PCODE: $000000B8 VOL: 0
;PCODE: $000000B9 VOL: 0
; 0000 00C8 TCCR2=0x00;
;PCODE: $000000BA VOL: 0
;PCODE: $000000BB VOL: 0
; 0000 00C9 TCNT2=0x00;
;PCODE: $000000BC VOL: 0
;PCODE: $000000BD VOL: 0
; 0000 00CA OCR2=0x00;
;PCODE: $000000BE VOL: 0
;PCODE: $000000BF VOL: 0
; 0000 00CB 
; 0000 00CC // External Interrupt(s) initialization
; 0000 00CD // INT0: Off
; 0000 00CE // INT1: Off
; 0000 00CF MCUCR=0x00;
;PCODE: $000000C0 VOL: 0
;PCODE: $000000C1 VOL: 0
; 0000 00D0 
; 0000 00D1 // Timer(s)/Counter(s) Interrupt(s) initialization
; 0000 00D2 TIMSK=0x00;
;PCODE: $000000C2 VOL: 0
;PCODE: $000000C3 VOL: 0
; 0000 00D3 
; 0000 00D4 // USART initialization
; 0000 00D5 // Communication Parameters: 8 Data, 1 Stop, No Parity
; 0000 00D6 // USART Receiver: On
; 0000 00D7 // USART Transmitter: On
; 0000 00D8 // USART Mode: Asynchronous
; 0000 00D9 // USART Baud Rate: 19200
; 0000 00DA UCSRA=0x00;
;PCODE: $000000C4 VOL: 0
;PCODE: $000000C5 VOL: 0
; 0000 00DB UCSRB=0x98;
;PCODE: $000000C6 VOL: 0
;PCODE: $000000C7 VOL: 0
; 0000 00DC UCSRC=0x86;
;PCODE: $000000C8 VOL: 0
;PCODE: $000000C9 VOL: 0
; 0000 00DD UBRRH=0x00;
;PCODE: $000000CA VOL: 0
;PCODE: $000000CB VOL: 0
; 0000 00DE UBRRL=0x0C;   //19200 при xtal 4,0МГц
;PCODE: $000000CC VOL: 0
;PCODE: $000000CD VOL: 0
; 0000 00DF //UBRRL=0x23; //19200 при xtal 11,0592МГц
; 0000 00E0 
; 0000 00E1 // Analog Comparator initialization
; 0000 00E2 // Analog Comparator: Off
; 0000 00E3 // Analog Comparator Input Capture by Timer/Counter 1: Off
; 0000 00E4 ACSR=0x80;
;PCODE: $000000CE VOL: 0
;PCODE: $000000CF VOL: 0
; 0000 00E5 SFIOR=0x00;
;PCODE: $000000D0 VOL: 0
;PCODE: $000000D1 VOL: 0
; 0000 00E6 
; 0000 00E7 // ADC initialization
; 0000 00E8 // ADC disabled
; 0000 00E9 ADCSRA=0x00;
;PCODE: $000000D2 VOL: 0
;PCODE: $000000D3 VOL: 0
; 0000 00EA 
; 0000 00EB // SPI initialization
; 0000 00EC // SPI disabled
; 0000 00ED SPCR=0x00;
;PCODE: $000000D4 VOL: 0
;PCODE: $000000D5 VOL: 0
; 0000 00EE 
; 0000 00EF // TWI initialization
; 0000 00F0 // TWI disabled
; 0000 00F1 TWCR=0x00;
;PCODE: $000000D6 VOL: 0
;PCODE: $000000D7 VOL: 0
; 0000 00F2 
; 0000 00F3 // Watchdog Timer Prescaler: OSC/2048k
; 0000 00F4 #pragma optsize-
; 0000 00F5 WDTCR=0x1F;
;PCODE: $000000D8 VOL: 0
;PCODE: $000000D9 VOL: 0
; 0000 00F6 WDTCR=0x0F;
;PCODE: $000000DA VOL: 0
;PCODE: $000000DB VOL: 0
; 0000 00F7 #ifdef _OPTIMIZE_SIZE_
; 0000 00F8 #pragma optsize+
; 0000 00F9 #endif
; 0000 00FA // Global enable interrupts
; 0000 00FB #asm("sei")
;PCODE: $000000DC VOL: 0
	sei
;PCODE: $000000DD VOL: 0
; 0000 00FC }
;PCODE: $000000DE VOL: 0
;PCODE: $000000DF VOL: 0
;
;void soft_delay(u16 ms, u8 i){
; 0000 00FE void soft_delay(unsigned int     ms, unsigned char     i){
;PCODE: $000000E0 VOL: 0
;PCODE: $000000E1 VOL: 0
; 0000 00FF        Timer[i].count = ms;     // s
;	ms -> Y+1
;	i -> Y+0
;PCODE: $000000E2 VOL: 0
;PCODE: $000000E3 VOL: 0
;PCODE: $000000E4 VOL: 0
;PCODE: $000000E5 VOL: 0
;PCODE: $000000E6 VOL: 0
;PCODE: $000000E7 VOL: 0
;PCODE: $000000E8 VOL: 0
; 0000 0100        Timer[i].flag = 1;
;PCODE: $000000E9 VOL: 0
;PCODE: $000000EA VOL: 0
;PCODE: $000000EB VOL: 0
;PCODE: $000000EC VOL: 0
;PCODE: $000000ED VOL: 0
;PCODE: $000000EE VOL: 0
; 0000 0101        TIMSK |= 1 << TOIE1;     // Timer1 on
;PCODE: $000000EF VOL: 0
;PCODE: $000000F0 VOL: 0
;PCODE: $000000F1 VOL: 0
; 0000 0102                              }
;PCODE: $000000F2 VOL: 0
;PCODE: $000000F3 VOL: 0
;PCODE: $000000F4 VOL: 0
;
;void clean_rx_buff(void){ u8 i;// очистка буфера массива символов
; 0000 0104 void clean_rx_buff(void){ unsigned char     i;
;PCODE: $000000F5 VOL: 0
;PCODE: $000000F6 VOL: 0
; 0000 0105                   for (i=0;i<RX_BUFFER_SIZE;i++){
;PCODE: $000000F7 VOL: 0
;	i -> R17
;PCODE: $000000F8 VOL: 0
;PCODE: $000000F9 VOL: 0
;PCODE: $000000FA VOL: 0
;PCODE: $000000FB VOL: 0
;PCODE: $000000FC VOL: 0
;PCODE: $000000FD VOL: 0
;PCODE: $000000FE VOL: 0
;PCODE: $000000FF VOL: 0
;PCODE: $00000100 VOL: 0
; 0000 0106                        rx_buffer[i] = '\0';      // <NULL>
;PCODE: $00000101 VOL: 0
;PCODE: $00000102 VOL: 0
;PCODE: $00000103 VOL: 0
;PCODE: $00000104 VOL: 0
;PCODE: $00000105 VOL: 0
; 0000 0107                                                 }
;PCODE: $00000106 VOL: 0
;PCODE: $00000107 VOL: 0
;PCODE: $00000108 VOL: 0
;PCODE: $00000109 VOL: 0
;PCODE: $0000010A VOL: 0
; 0000 0108                         }
;PCODE: $0000010B VOL: 0
;PCODE: $0000010C VOL: 0
;PCODE: $0000010D VOL: 0
;
;void clean_get_phone(void){ u8 i;// очистка буфера принятого номера
; 0000 010A void clean_get_phone(void){ unsigned char     i;
;PCODE: $0000010E VOL: 0
;PCODE: $0000010F VOL: 0
; 0000 010B                   for (i=0;i<13;i++){
;PCODE: $00000110 VOL: 0
;	i -> R17
;PCODE: $00000111 VOL: 0
;PCODE: $00000112 VOL: 0
;PCODE: $00000113 VOL: 0
;PCODE: $00000114 VOL: 0
;PCODE: $00000115 VOL: 0
;PCODE: $00000116 VOL: 0
;PCODE: $00000117 VOL: 0
;PCODE: $00000118 VOL: 0
;PCODE: $00000119 VOL: 0
; 0000 010C                        get_phone[i] = '\0';      // <NULL>
;PCODE: $0000011A VOL: 0
;PCODE: $0000011B VOL: 0
;PCODE: $0000011C VOL: 0
;PCODE: $0000011D VOL: 0
;PCODE: $0000011E VOL: 0
; 0000 010D                                                 }
;PCODE: $0000011F VOL: 0
;PCODE: $00000120 VOL: 0
;PCODE: $00000121 VOL: 0
;PCODE: $00000122 VOL: 0
;PCODE: $00000123 VOL: 0
; 0000 010E                           }
;PCODE: $00000124 VOL: 0
;PCODE: $00000125 VOL: 0
;PCODE: $00000126 VOL: 0
;
;void clean(void){      // очистка смс буфера
; 0000 0110 void clean(void){
;PCODE: $00000127 VOL: 0
;PCODE: $00000128 VOL: 0
; 0000 0111      clean_rx_buff();  // очистка буфера приёма
;PCODE: $00000129 VOL: 0
; 0000 0112      buff[0] = '\0';   // <NULL>  первая цифра в смс
;PCODE: $0000012A VOL: 0
;PCODE: $0000012B VOL: 0
; 0000 0113      buff[1] = '\0';   // <NULL>  вторая цифра в смс
;PCODE: $0000012C VOL: 0
;PCODE: $0000012D VOL: 0
;PCODE: $0000012E VOL: 0
; 0000 0114      sim900 = 2;       // шаг ини
;PCODE: $0000012F VOL: 0
;PCODE: $00000130 VOL: 0
; 0000 0115      ATflag = 10;      // удаляем смс
;PCODE: $00000131 VOL: 0
;PCODE: $00000132 VOL: 0
; 0000 0116      iniflag = 1;      // взводим ини SIM900
;PCODE: $00000133 VOL: 0
;PCODE: $00000134 VOL: 0
; 0000 0117      first = 1;        // первый вход в ATflag == 10
;PCODE: $00000135 VOL: 0
;PCODE: $00000136 VOL: 0
;PCODE: $00000137 VOL: 0
; 0000 0118      fst = 1;
;PCODE: $00000138 VOL: 0
;PCODE: $00000139 VOL: 0
;PCODE: $0000013A VOL: 0
; 0000 0119      soft_delay(500,1);// время для обработки ATflag == 10
;PCODE: $0000013B VOL: 0
;PCODE: $0000013C VOL: 0
;PCODE: $0000013D VOL: 0
;PCODE: $0000013E VOL: 0
;PCODE: $0000013F VOL: 0
; 0000 011A                 }
;PCODE: $00000140 VOL: 0
;PCODE: $00000141 VOL: 0
;
;void chek_get (void){
; 0000 011C void chek_get (void){
;PCODE: $00000142 VOL: 0
;PCODE: $00000143 VOL: 0
; 0000 011D             if(getchar() == 'O'){       // ждем O
;PCODE: $00000144 VOL: 0
;PCODE: $00000145 VOL: 0
;PCODE: $00000146 VOL: 0
; 0000 011E                if(getchar() == 'K'){    // и проверяем подтверждение
;PCODE: $00000147 VOL: 0
;PCODE: $00000148 VOL: 0
;PCODE: $00000149 VOL: 0
; 0000 011F                   ATflag++;
;PCODE: $0000014A VOL: 0
; 0000 0120                   clean_rx_buff();      // очистка буфера
;PCODE: $0000014B VOL: 0
; 0000 0121                                    }
; 0000 0122                first = 1;               // повторить команду
;PCODE: $0000014C VOL: 0
;PCODE: $0000014D VOL: 0
;PCODE: $0000014E VOL: 0
;PCODE: $0000014F VOL: 0
; 0000 0123                clean_rx_buff();
;PCODE: $00000150 VOL: 0
; 0000 0124                                 }
; 0000 0125                     }
;PCODE: $00000151 VOL: 0
;PCODE: $00000152 VOL: 0
;PCODE: $00000153 VOL: 0
;
;void SGPIO (u8 operation_r_w, u8 GPIO_pin, u8 function_in_out, u8 level){
; 0000 0127 void SGPIO (unsigned char     operation_r_w, unsigned char     GPIO_pin, unsigned char     function_in_out, unsigned char     level){
;PCODE: $00000154 VOL: 0
;PCODE: $00000155 VOL: 0
; 0000 0128   printf("AT+SGPIO=%d,%d,%d,%d\r\n",operation_r_w,GPIO_pin,function_in_out,level); // конфиг.вх/вых.
;	operation_r_w -> Y+3
;	GPIO_pin -> Y+2
;	function_in_out -> Y+1
;	level -> Y+0
;PCODE: $00000156 VOL: 0
;PCODE: $00000157 VOL: 0
;PCODE: $00000158 VOL: 0
;PCODE: $00000159 VOL: 0
;PCODE: $0000015A VOL: 0
;PCODE: $0000015B VOL: 0
;PCODE: $0000015C VOL: 0
;PCODE: $0000015D VOL: 0
;PCODE: $0000015E VOL: 0
;PCODE: $0000015F VOL: 0
;PCODE: $00000160 VOL: 0
;PCODE: $00000161 VOL: 0
;PCODE: $00000162 VOL: 0
;PCODE: $00000163 VOL: 0
;PCODE: $00000164 VOL: 0
;PCODE: $00000165 VOL: 0
;PCODE: $00000166 VOL: 0
;PCODE: $00000167 VOL: 0
;PCODE: $00000168 VOL: 0
; 0000 0129   clean_rx_buff();  // очистка буфера
;PCODE: $00000169 VOL: 0
; 0000 012A                                                                         }
;PCODE: $0000016A VOL: 0
;PCODE: $0000016B VOL: 0
;PCODE: $0000016C VOL: 0
;
;void sms(void){
; 0000 012C void sms(void){
;PCODE: $0000016D VOL: 0
;PCODE: $0000016E VOL: 0
; 0000 012D          if(fst == 1) {         // первый вход
;PCODE: $0000016F VOL: 0
;PCODE: $00000170 VOL: 0
;PCODE: $00000171 VOL: 0
; 0000 012E             printf("AT+CMGS="); // set sms
;PCODE: $00000172 VOL: 0
;PCODE: $00000173 VOL: 0
;PCODE: $00000174 VOL: 0
;PCODE: $00000175 VOL: 0
;PCODE: $00000176 VOL: 0
;PCODE: $00000177 VOL: 0
;PCODE: $00000178 VOL: 0
; 0000 012F             putchar('"');
;PCODE: $00000179 VOL: 0
;PCODE: $0000017A VOL: 0
;PCODE: $0000017B VOL: 0
; 0000 0130             printf(my_phone);   // телефон
;PCODE: $0000017C VOL: 0
;PCODE: $0000017D VOL: 0
;PCODE: $0000017E VOL: 0
;PCODE: $0000017F VOL: 0
;PCODE: $00000180 VOL: 0
;PCODE: $00000181 VOL: 0
; 0000 0131             putchar('"');
;PCODE: $00000182 VOL: 0
;PCODE: $00000183 VOL: 0
;PCODE: $00000184 VOL: 0
; 0000 0132             printf("\r\n");     // CR LF
;PCODE: $00000185 VOL: 0
;PCODE: $00000186 VOL: 0
;PCODE: $00000187 VOL: 0
;PCODE: $00000188 VOL: 0
;PCODE: $00000189 VOL: 0
;PCODE: $0000018A VOL: 0
;PCODE: $0000018B VOL: 0
; 0000 0133             soft_delay(500,0);  // delay 500ms
;PCODE: $0000018C VOL: 0
;PCODE: $0000018D VOL: 0
;PCODE: $0000018E VOL: 0
;PCODE: $0000018F VOL: 0
;PCODE: $00000190 VOL: 0
; 0000 0134             soft_delay(5000,1); // delay 5s
;PCODE: $00000191 VOL: 0
;PCODE: $00000192 VOL: 0
;PCODE: $00000193 VOL: 0
;PCODE: $00000194 VOL: 0
;PCODE: $00000195 VOL: 0
; 0000 0135             fst = 0;            // больше не повторять
;PCODE: $00000196 VOL: 0
;PCODE: $00000197 VOL: 0
;PCODE: $00000198 VOL: 0
; 0000 0136                        }
; 0000 0137          if (Timer[0].flag == 0) {
;PCODE: $00000199 VOL: 0
;PCODE: $0000019A VOL: 1
;PCODE: $0000019B VOL: 0
;PCODE: $0000019C VOL: 0
; 0000 0138             //if(getchar() == '>'){   // ожидаем
; 0000 0139                puts(text);          // send err
;PCODE: $0000019D VOL: 0
;PCODE: $0000019E VOL: 0
;PCODE: $0000019F VOL: 0
; 0000 013A                putsf("\x1A\x0D");   // SUB (CTRL + Z)
;PCODE: $000001A0 VOL: 0
;PCODE: $000001A1 VOL: 0
;PCODE: $000001A2 VOL: 0
;PCODE: $000001A3 VOL: 0
; 0000 013B                if(sim900 == 7) {sim900++;}  // след.шаг
;PCODE: $000001A4 VOL: 0
;PCODE: $000001A5 VOL: 0
;PCODE: $000001A6 VOL: 0
;PCODE: $000001A7 VOL: 0
; 0000 013C                else {pin = cln;}    // след.шаг
;PCODE: $000001A8 VOL: 0
;PCODE: $000001A9 VOL: 0
;PCODE: $000001AA VOL: 0
;PCODE: $000001AB VOL: 0
;PCODE: $000001AC VOL: 0
; 0000 013D                                 //}
; 0000 013E                                  }
; 0000 013F          if (Timer[1].flag == 0) {
;PCODE: $000001AD VOL: 0
;PCODE: $000001AE VOL: 1
;PCODE: $000001AF VOL: 0
;PCODE: $000001B0 VOL: 0
;PCODE: $000001B1 VOL: 0
; 0000 0140              clean();               // очистка смс буфера
;PCODE: $000001B2 VOL: 0
; 0000 0141                                  }
; 0000 0142               }
;PCODE: $000001B3 VOL: 0
;PCODE: $000001B4 VOL: 0
;PCODE: $000001B5 VOL: 0
;
;void ini_sim900(void){u8 t = 20;   //ms
; 0000 0144 void ini_sim900(void){unsigned char     t = 20;
;PCODE: $000001B6 VOL: 0
;PCODE: $000001B7 VOL: 0
; 0000 0145 switch (ATflag) {
;PCODE: $000001B8 VOL: 0
;	t -> R17
;PCODE: $000001B9 VOL: 0
;PCODE: $000001BA VOL: 0
;PCODE: $000001BB VOL: 0
;PCODE: $000001BC VOL: 0
; 0000 0146 case 1: {
;PCODE: $000001BD VOL: 0
;PCODE: $000001BE VOL: 0
; 0000 0147          if(first){                // первый вход
;PCODE: $000001BF VOL: 0
;PCODE: $000001C0 VOL: 0
;PCODE: $000001C1 VOL: 0
; 0000 0148          putsf("AT+IPR=19200\r");  // set Baud Rate sim900
;PCODE: $000001C2 VOL: 0
;PCODE: $000001C3 VOL: 0
;PCODE: $000001C4 VOL: 0
;PCODE: $000001C5 VOL: 0
; 0000 0149          soft_delay(t,0); // delay 10ms
;PCODE: $000001C6 VOL: 0
;PCODE: $000001C7 VOL: 0
;PCODE: $000001C8 VOL: 0
;PCODE: $000001C9 VOL: 0
;PCODE: $000001CA VOL: 0
;PCODE: $000001CB VOL: 0
; 0000 014A          first = 0;
;PCODE: $000001CC VOL: 0
;PCODE: $000001CD VOL: 0
;PCODE: $000001CE VOL: 0
; 0000 014B                   }
; 0000 014C 
; 0000 014D          if(Timer[0].flag == 0) {
;PCODE: $000001CF VOL: 0
;PCODE: $000001D0 VOL: 1
;PCODE: $000001D1 VOL: 0
;PCODE: $000001D2 VOL: 0
; 0000 014E          //ATflag++;
; 0000 014F          chek_get (); // проверяем ответ sim900
;PCODE: $000001D3 VOL: 0
; 0000 0150                                 }
; 0000 0151         }
;PCODE: $000001D4 VOL: 0
; 0000 0152 break;
;PCODE: $000001D5 VOL: 0
; 0000 0153 case 2: {
;PCODE: $000001D6 VOL: 0
;PCODE: $000001D7 VOL: 0
;PCODE: $000001D8 VOL: 0
; 0000 0154          if(first){         // первый вход
;PCODE: $000001D9 VOL: 0
;PCODE: $000001DA VOL: 0
;PCODE: $000001DB VOL: 0
; 0000 0155          putsf("ATE0\r");   // stop echo
;PCODE: $000001DC VOL: 0
;PCODE: $000001DD VOL: 0
;PCODE: $000001DE VOL: 0
;PCODE: $000001DF VOL: 0
; 0000 0156          soft_delay(t,0);  // delay 10ms
;PCODE: $000001E0 VOL: 0
;PCODE: $000001E1 VOL: 0
;PCODE: $000001E2 VOL: 0
;PCODE: $000001E3 VOL: 0
;PCODE: $000001E4 VOL: 0
;PCODE: $000001E5 VOL: 0
; 0000 0157          first = 0;
;PCODE: $000001E6 VOL: 0
;PCODE: $000001E7 VOL: 0
;PCODE: $000001E8 VOL: 0
; 0000 0158                   }
; 0000 0159          if (Timer[0].flag == 0) {
;PCODE: $000001E9 VOL: 0
;PCODE: $000001EA VOL: 1
;PCODE: $000001EB VOL: 0
;PCODE: $000001EC VOL: 0
; 0000 015A              chek_get (); // проверяем ответ sim900
;PCODE: $000001ED VOL: 0
; 0000 015B                                  }
; 0000 015C         }
;PCODE: $000001EE VOL: 0
; 0000 015D break;
;PCODE: $000001EF VOL: 0
; 0000 015E case 3: {
;PCODE: $000001F0 VOL: 0
;PCODE: $000001F1 VOL: 0
;PCODE: $000001F2 VOL: 0
; 0000 015F          if(first){         // первый вход
;PCODE: $000001F3 VOL: 0
;PCODE: $000001F4 VOL: 0
;PCODE: $000001F5 VOL: 0
; 0000 0160          putsf("ATV1\r");   // OK echo
;PCODE: $000001F6 VOL: 0
;PCODE: $000001F7 VOL: 0
;PCODE: $000001F8 VOL: 0
;PCODE: $000001F9 VOL: 0
; 0000 0161          soft_delay(t,0);   // delay 10ms
;PCODE: $000001FA VOL: 0
;PCODE: $000001FB VOL: 0
;PCODE: $000001FC VOL: 0
;PCODE: $000001FD VOL: 0
;PCODE: $000001FE VOL: 0
;PCODE: $000001FF VOL: 0
; 0000 0162          first = 0;
;PCODE: $00000200 VOL: 0
;PCODE: $00000201 VOL: 0
;PCODE: $00000202 VOL: 0
; 0000 0163                   }
; 0000 0164          if (Timer[0].flag == 0) {
;PCODE: $00000203 VOL: 0
;PCODE: $00000204 VOL: 1
;PCODE: $00000205 VOL: 0
;PCODE: $00000206 VOL: 0
; 0000 0165              chek_get (); // проверяем ответ sim900
;PCODE: $00000207 VOL: 0
; 0000 0166                                  }
; 0000 0167         }
;PCODE: $00000208 VOL: 0
; 0000 0168 break;
;PCODE: $00000209 VOL: 0
; 0000 0169 case 4: {
;PCODE: $0000020A VOL: 0
;PCODE: $0000020B VOL: 0
;PCODE: $0000020C VOL: 0
; 0000 016A          if(first){            // первый вход
;PCODE: $0000020D VOL: 0
;PCODE: $0000020E VOL: 0
;PCODE: $0000020F VOL: 0
; 0000 016B          putsf("AT+CMEE=0\r"); // stop error code
;PCODE: $00000210 VOL: 0
;PCODE: $00000211 VOL: 0
;PCODE: $00000212 VOL: 0
;PCODE: $00000213 VOL: 0
; 0000 016C          soft_delay(t,0);      // delay 10ms
;PCODE: $00000214 VOL: 0
;PCODE: $00000215 VOL: 0
;PCODE: $00000216 VOL: 0
;PCODE: $00000217 VOL: 0
;PCODE: $00000218 VOL: 0
;PCODE: $00000219 VOL: 0
; 0000 016D          first = 0;
;PCODE: $0000021A VOL: 0
;PCODE: $0000021B VOL: 0
;PCODE: $0000021C VOL: 0
; 0000 016E                   }
; 0000 016F          if (Timer[0].flag == 0) {
;PCODE: $0000021D VOL: 0
;PCODE: $0000021E VOL: 1
;PCODE: $0000021F VOL: 0
;PCODE: $00000220 VOL: 0
; 0000 0170              chek_get (); // проверяем ответ sim900
;PCODE: $00000221 VOL: 0
; 0000 0171                                  }
; 0000 0172         }
;PCODE: $00000222 VOL: 0
; 0000 0173 break;
;PCODE: $00000223 VOL: 0
; 0000 0174 case 5: {
;PCODE: $00000224 VOL: 0
;PCODE: $00000225 VOL: 0
;PCODE: $00000226 VOL: 0
; 0000 0175          if(first){            // первый вход
;PCODE: $00000227 VOL: 0
;PCODE: $00000228 VOL: 0
;PCODE: $00000229 VOL: 0
; 0000 0176          putsf("AT+CLIP=1\r"); // АОН enable
;PCODE: $0000022A VOL: 0
;PCODE: $0000022B VOL: 0
;PCODE: $0000022C VOL: 0
;PCODE: $0000022D VOL: 0
; 0000 0177          soft_delay(t,0);      // delay 10ms
;PCODE: $0000022E VOL: 0
;PCODE: $0000022F VOL: 0
;PCODE: $00000230 VOL: 0
;PCODE: $00000231 VOL: 0
;PCODE: $00000232 VOL: 0
;PCODE: $00000233 VOL: 0
; 0000 0178          first = 0;
;PCODE: $00000234 VOL: 0
;PCODE: $00000235 VOL: 0
;PCODE: $00000236 VOL: 0
; 0000 0179                   }
; 0000 017A          if (Timer[0].flag == 0) {
;PCODE: $00000237 VOL: 0
;PCODE: $00000238 VOL: 1
;PCODE: $00000239 VOL: 0
;PCODE: $0000023A VOL: 0
; 0000 017B              chek_get (); // проверяем ответ sim900
;PCODE: $0000023B VOL: 0
; 0000 017C                                  }
; 0000 017D         }
;PCODE: $0000023C VOL: 0
; 0000 017E break;
;PCODE: $0000023D VOL: 0
; 0000 017F case 6: {
;PCODE: $0000023E VOL: 0
;PCODE: $0000023F VOL: 0
;PCODE: $00000240 VOL: 0
; 0000 0180          if(first){          // первый вход
;PCODE: $00000241 VOL: 0
;PCODE: $00000242 VOL: 0
;PCODE: $00000243 VOL: 0
; 0000 0181          printf("AT+CSCA="); // set sms-service number
;PCODE: $00000244 VOL: 0
;PCODE: $00000245 VOL: 0
;PCODE: $00000246 VOL: 0
;PCODE: $00000247 VOL: 0
;PCODE: $00000248 VOL: 0
;PCODE: $00000249 VOL: 0
;PCODE: $0000024A VOL: 0
; 0000 0182          putchar('"');
;PCODE: $0000024B VOL: 0
;PCODE: $0000024C VOL: 0
;PCODE: $0000024D VOL: 0
; 0000 0183          printf(service);    // телефон сервис-центра смс
;PCODE: $0000024E VOL: 0
;PCODE: $0000024F VOL: 0
;PCODE: $00000250 VOL: 0
;PCODE: $00000251 VOL: 0
;PCODE: $00000252 VOL: 0
;PCODE: $00000253 VOL: 0
; 0000 0184          putchar('"');
;PCODE: $00000254 VOL: 0
;PCODE: $00000255 VOL: 0
;PCODE: $00000256 VOL: 0
; 0000 0185          printf("\r\n");
;PCODE: $00000257 VOL: 0
;PCODE: $00000258 VOL: 0
;PCODE: $00000259 VOL: 0
;PCODE: $0000025A VOL: 0
;PCODE: $0000025B VOL: 0
;PCODE: $0000025C VOL: 0
;PCODE: $0000025D VOL: 0
; 0000 0186          soft_delay(t,0);    // delay 10ms
;PCODE: $0000025E VOL: 0
;PCODE: $0000025F VOL: 0
;PCODE: $00000260 VOL: 0
;PCODE: $00000261 VOL: 0
;PCODE: $00000262 VOL: 0
;PCODE: $00000263 VOL: 0
; 0000 0187          first = 0;
;PCODE: $00000264 VOL: 0
;PCODE: $00000265 VOL: 0
;PCODE: $00000266 VOL: 0
; 0000 0188                   }
; 0000 0189          if (Timer[0].flag == 0) {
;PCODE: $00000267 VOL: 0
;PCODE: $00000268 VOL: 1
;PCODE: $00000269 VOL: 0
;PCODE: $0000026A VOL: 0
; 0000 018A              chek_get ();    // проверяем ответ sim900
;PCODE: $0000026B VOL: 0
; 0000 018B                                  }
; 0000 018C         }
;PCODE: $0000026C VOL: 0
; 0000 018D break;
;PCODE: $0000026D VOL: 0
; 0000 018E case 7: {
;PCODE: $0000026E VOL: 0
;PCODE: $0000026F VOL: 0
;PCODE: $00000270 VOL: 0
; 0000 018F          if(first){            // первый вход
;PCODE: $00000271 VOL: 0
;PCODE: $00000272 VOL: 0
;PCODE: $00000273 VOL: 0
; 0000 0190          putsf("AT+CSCB=1\r"); // stop Cell Broadcast
;PCODE: $00000274 VOL: 0
;PCODE: $00000275 VOL: 0
;PCODE: $00000276 VOL: 0
;PCODE: $00000277 VOL: 0
; 0000 0191          soft_delay(t,0);      // delay 10ms
;PCODE: $00000278 VOL: 0
;PCODE: $00000279 VOL: 0
;PCODE: $0000027A VOL: 0
;PCODE: $0000027B VOL: 0
;PCODE: $0000027C VOL: 0
;PCODE: $0000027D VOL: 0
; 0000 0192          first = 0;
;PCODE: $0000027E VOL: 0
;PCODE: $0000027F VOL: 0
;PCODE: $00000280 VOL: 0
; 0000 0193                   }
; 0000 0194          if (Timer[0].flag == 0) {
;PCODE: $00000281 VOL: 0
;PCODE: $00000282 VOL: 1
;PCODE: $00000283 VOL: 0
;PCODE: $00000284 VOL: 0
; 0000 0195              chek_get (); // проверяем ответ sim900
;PCODE: $00000285 VOL: 0
; 0000 0196                                  }
; 0000 0197         }
;PCODE: $00000286 VOL: 0
; 0000 0198 break;
;PCODE: $00000287 VOL: 0
; 0000 0199 case 8: {
;PCODE: $00000288 VOL: 0
;PCODE: $00000289 VOL: 0
;PCODE: $0000028A VOL: 0
; 0000 019A          if(first){            // первый вход
;PCODE: $0000028B VOL: 0
;PCODE: $0000028C VOL: 0
;PCODE: $0000028D VOL: 0
; 0000 019B          putsf("AT+CMGF=1\r"); // text format sms
;PCODE: $0000028E VOL: 0
;PCODE: $0000028F VOL: 0
;PCODE: $00000290 VOL: 0
;PCODE: $00000291 VOL: 0
; 0000 019C          soft_delay(t,0);      // delay 10ms
;PCODE: $00000292 VOL: 0
;PCODE: $00000293 VOL: 0
;PCODE: $00000294 VOL: 0
;PCODE: $00000295 VOL: 0
;PCODE: $00000296 VOL: 0
;PCODE: $00000297 VOL: 0
; 0000 019D          first = 0;
;PCODE: $00000298 VOL: 0
;PCODE: $00000299 VOL: 0
;PCODE: $0000029A VOL: 0
; 0000 019E                   }
; 0000 019F          if (Timer[0].flag == 0) {
;PCODE: $0000029B VOL: 0
;PCODE: $0000029C VOL: 1
;PCODE: $0000029D VOL: 0
;PCODE: $0000029E VOL: 0
; 0000 01A0              chek_get (); // проверяем ответ sim900
;PCODE: $0000029F VOL: 0
; 0000 01A1                                  }
; 0000 01A2         }
;PCODE: $000002A0 VOL: 0
; 0000 01A3 break;
;PCODE: $000002A1 VOL: 0
; 0000 01A4 case 9: {
;PCODE: $000002A2 VOL: 0
;PCODE: $000002A3 VOL: 0
;PCODE: $000002A4 VOL: 0
; 0000 01A5          if(first){         // первый вход
;PCODE: $000002A5 VOL: 0
;PCODE: $000002A6 VOL: 0
;PCODE: $000002A7 VOL: 0
; 0000 01A6          printf("AT+CSCS="); // тип сети
;PCODE: $000002A8 VOL: 0
;PCODE: $000002A9 VOL: 0
;PCODE: $000002AA VOL: 0
;PCODE: $000002AB VOL: 0
;PCODE: $000002AC VOL: 0
;PCODE: $000002AD VOL: 0
;PCODE: $000002AE VOL: 0
; 0000 01A7          putchar('"');
;PCODE: $000002AF VOL: 0
;PCODE: $000002B0 VOL: 0
;PCODE: $000002B1 VOL: 0
; 0000 01A8          printf("GSM");
;PCODE: $000002B2 VOL: 0
;PCODE: $000002B3 VOL: 0
;PCODE: $000002B4 VOL: 0
;PCODE: $000002B5 VOL: 0
;PCODE: $000002B6 VOL: 0
;PCODE: $000002B7 VOL: 0
;PCODE: $000002B8 VOL: 0
; 0000 01A9          putchar('"');
;PCODE: $000002B9 VOL: 0
;PCODE: $000002BA VOL: 0
;PCODE: $000002BB VOL: 0
; 0000 01AA          printf("\r\n");
;PCODE: $000002BC VOL: 0
;PCODE: $000002BD VOL: 0
;PCODE: $000002BE VOL: 0
;PCODE: $000002BF VOL: 0
;PCODE: $000002C0 VOL: 0
;PCODE: $000002C1 VOL: 0
;PCODE: $000002C2 VOL: 0
; 0000 01AB          soft_delay(t,0);    // delay 10ms
;PCODE: $000002C3 VOL: 0
;PCODE: $000002C4 VOL: 0
;PCODE: $000002C5 VOL: 0
;PCODE: $000002C6 VOL: 0
;PCODE: $000002C7 VOL: 0
;PCODE: $000002C8 VOL: 0
; 0000 01AC          first = 0;
;PCODE: $000002C9 VOL: 0
;PCODE: $000002CA VOL: 0
;PCODE: $000002CB VOL: 0
; 0000 01AD                   }
; 0000 01AE          if (Timer[0].flag == 0) {
;PCODE: $000002CC VOL: 0
;PCODE: $000002CD VOL: 1
;PCODE: $000002CE VOL: 0
;PCODE: $000002CF VOL: 0
; 0000 01AF              chek_get (); // проверяем ответ sim900
;PCODE: $000002D0 VOL: 0
; 0000 01B0                                  }
; 0000 01B1         }
;PCODE: $000002D1 VOL: 0
; 0000 01B2 break;
;PCODE: $000002D2 VOL: 0
; 0000 01B3 case 10: {
;PCODE: $000002D3 VOL: 0
;PCODE: $000002D4 VOL: 0
;PCODE: $000002D5 VOL: 0
; 0000 01B4          if(first){           // первый вход
;PCODE: $000002D6 VOL: 0
;PCODE: $000002D7 VOL: 0
;PCODE: $000002D8 VOL: 0
; 0000 01B5          printf("AT+CMGDA="); // удаление всех смс
;PCODE: $000002D9 VOL: 0
;PCODE: $000002DA VOL: 0
;PCODE: $000002DB VOL: 0
;PCODE: $000002DC VOL: 0
;PCODE: $000002DD VOL: 0
;PCODE: $000002DE VOL: 0
;PCODE: $000002DF VOL: 0
; 0000 01B6          putchar('"');
;PCODE: $000002E0 VOL: 0
;PCODE: $000002E1 VOL: 0
;PCODE: $000002E2 VOL: 0
; 0000 01B7          printf("DEL ALL");
;PCODE: $000002E3 VOL: 0
;PCODE: $000002E4 VOL: 0
;PCODE: $000002E5 VOL: 0
;PCODE: $000002E6 VOL: 0
;PCODE: $000002E7 VOL: 0
;PCODE: $000002E8 VOL: 0
;PCODE: $000002E9 VOL: 0
; 0000 01B8          putchar('"');
;PCODE: $000002EA VOL: 0
;PCODE: $000002EB VOL: 0
;PCODE: $000002EC VOL: 0
; 0000 01B9          printf("\r\n");
;PCODE: $000002ED VOL: 0
;PCODE: $000002EE VOL: 0
;PCODE: $000002EF VOL: 0
;PCODE: $000002F0 VOL: 0
;PCODE: $000002F1 VOL: 0
;PCODE: $000002F2 VOL: 0
;PCODE: $000002F3 VOL: 0
; 0000 01BA          soft_delay(t,0);    // delay 10ms
;PCODE: $000002F4 VOL: 0
;PCODE: $000002F5 VOL: 0
;PCODE: $000002F6 VOL: 0
;PCODE: $000002F7 VOL: 0
;PCODE: $000002F8 VOL: 0
;PCODE: $000002F9 VOL: 0
; 0000 01BB          first = 0;
;PCODE: $000002FA VOL: 0
;PCODE: $000002FB VOL: 0
;PCODE: $000002FC VOL: 0
; 0000 01BC                   }
; 0000 01BD          if (Timer[0].flag == 0) {
;PCODE: $000002FD VOL: 0
;PCODE: $000002FE VOL: 1
;PCODE: $000002FF VOL: 0
;PCODE: $00000300 VOL: 0
; 0000 01BE              chek_get (); // проверяем ответ sim900
;PCODE: $00000301 VOL: 0
; 0000 01BF                                  }
; 0000 01C0          }
;PCODE: $00000302 VOL: 0
; 0000 01C1 break;
;PCODE: $00000303 VOL: 0
; 0000 01C2 
; 0000 01C3 default: {iniflag = 0; // ini_ok
;PCODE: $00000304 VOL: 0
;PCODE: $00000305 VOL: 0
; 0000 01C4           ATflag = 1;
;PCODE: $00000306 VOL: 0
;PCODE: $00000307 VOL: 0
; 0000 01C5          }
; 0000 01C6               }
;PCODE: $00000308 VOL: 0
; 0000 01C7                      }
;PCODE: $00000309 VOL: 0
;PCODE: $0000030A VOL: 0
;PCODE: $0000030B VOL: 0
;
;void pwrkey_change (u8 i, u16 ms){
; 0000 01C9 void pwrkey_change (unsigned char     i, unsigned int     ms){
;PCODE: $0000030C VOL: 0
;PCODE: $0000030D VOL: 0
; 0000 01CA      pwrkey = i;       // действие на кнопку reset: 1 - вкл.; 0 - выкл.
;	i -> Y+2
;	ms -> Y+0
;PCODE: $0000030E VOL: 0
;PCODE: $0000030F VOL: 0
;PCODE: $00000310 VOL: 0
;PCODE: $00000311 VOL: 0
;PCODE: $00000312 VOL: 0
;PCODE: $00000313 VOL: 0
;PCODE: $00000314 VOL: 0
;PCODE: $00000315 VOL: 0
;PCODE: $00000316 VOL: 0
;PCODE: $00000317 VOL: 0
; 0000 01CB      soft_delay(ms,2); // delay мs 2й таймер
;PCODE: $00000318 VOL: 0
;PCODE: $00000319 VOL: 0
;PCODE: $0000031A VOL: 0
;PCODE: $0000031B VOL: 0
;PCODE: $0000031C VOL: 0
; 0000 01CC                                  }
;PCODE: $0000031D VOL: 0
;PCODE: $0000031E VOL: 0
;PCODE: $0000031F VOL: 0
;
;void key_repit(void){
; 0000 01CE void key_repit(void){
;PCODE: $00000320 VOL: 0
;PCODE: $00000321 VOL: 0
; 0000 01CF      if(first){
;PCODE: $00000322 VOL: 0
;PCODE: $00000323 VOL: 0
;PCODE: $00000324 VOL: 0
; 0000 01D0         pwrkey_change(1,1200); // вкл.кнопку на 1200мс
;PCODE: $00000325 VOL: 0
;PCODE: $00000326 VOL: 0
;PCODE: $00000327 VOL: 0
;PCODE: $00000328 VOL: 0
;PCODE: $00000329 VOL: 0
; 0000 01D1         first = 0;
;PCODE: $0000032A VOL: 0
;PCODE: $0000032B VOL: 0
;PCODE: $0000032C VOL: 0
; 0000 01D2               }
; 0000 01D3      if(Timer[2].flag == 0){
;PCODE: $0000032D VOL: 0
;PCODE: $0000032E VOL: 1
;PCODE: $0000032F VOL: 0
;PCODE: $00000330 VOL: 0
;PCODE: $00000331 VOL: 0
; 0000 01D4         pwrkey_change(0,2000); // выкл.кнопку на 2000мс
;PCODE: $00000332 VOL: 0
;PCODE: $00000333 VOL: 0
;PCODE: $00000334 VOL: 0
;PCODE: $00000335 VOL: 0
;PCODE: $00000336 VOL: 0
; 0000 01D5         first = 1;             // первый вход в ATflag == 10
;PCODE: $00000337 VOL: 0
;PCODE: $00000338 VOL: 0
;PCODE: $00000339 VOL: 0
; 0000 01D6         push++;                // след.нажатие
;PCODE: $0000033A VOL: 0
; 0000 01D7                            }
; 0000 01D8               }
;PCODE: $0000033B VOL: 0
;PCODE: $0000033C VOL: 0
;PCODE: $0000033D VOL: 0
;
;void main(void){
; 0000 01DA void main(void){
;PCODE: $0000033E VOL: 0
; 0000 01DB ini_avr();
;PCODE: $0000033F VOL: 0
; 0000 01DC 
; 0000 01DD while (1){
;PCODE: $00000340 VOL: 0
; 0000 01DE #asm("wdr")
;PCODE: $00000341 VOL: 0
	wdr
;PCODE: $00000342 VOL: 0
; 0000 01DF if (status_SIM) { // если sim900 включен:
;PCODE: $00000343 VOL: 0
;PCODE: $00000344 VOL: 0
;PCODE: $00000345 VOL: 0
; 0000 01E0 switch (sim900){  // автомат инициализации модуля и приёма смс
;PCODE: $00000346 VOL: 0
;PCODE: $00000347 VOL: 0
; 0000 01E1 case 0:{
;PCODE: $00000348 VOL: 0
;PCODE: $00000349 VOL: 0
; 0000 01E2         if (first){
;PCODE: $0000034A VOL: 0
;PCODE: $0000034B VOL: 0
;PCODE: $0000034C VOL: 0
; 0000 01E3         soft_delay(15000,1);     // delay 10s softtim №1
;PCODE: $0000034D VOL: 0
;PCODE: $0000034E VOL: 0
;PCODE: $0000034F VOL: 0
;PCODE: $00000350 VOL: 0
;PCODE: $00000351 VOL: 0
; 0000 01E4         first = 0;
;PCODE: $00000352 VOL: 0
;PCODE: $00000353 VOL: 0
;PCODE: $00000354 VOL: 0
; 0000 01E5                   }
; 0000 01E6         if(getchar() == 'l'){    // ЖДЕМ l
;PCODE: $00000355 VOL: 0
;PCODE: $00000356 VOL: 0
;PCODE: $00000357 VOL: 0
;PCODE: $00000358 VOL: 0
; 0000 01E7         symb = rx_rd_index;      // записываем индекс l
;PCODE: $00000359 VOL: 0
;PCODE: $0000035A VOL: 0
; 0000 01E8         soft_delay(20,0);        // delay 20ms
;PCODE: $0000035B VOL: 0
;PCODE: $0000035C VOL: 0
;PCODE: $0000035D VOL: 0
;PCODE: $0000035E VOL: 0
;PCODE: $0000035F VOL: 0
; 0000 01E9         sim900 = 1;              // след.шаг
;PCODE: $00000360 VOL: 0
;PCODE: $00000361 VOL: 0
; 0000 01EA         first = 1;
;PCODE: $00000362 VOL: 0
;PCODE: $00000363 VOL: 0
;PCODE: $00000364 VOL: 0
; 0000 01EB                             }
; 0000 01EC         if(Timer[1].flag == 0){  // ждем пока SIM900 загрузится
;PCODE: $00000365 VOL: 0
;PCODE: $00000366 VOL: 1
;PCODE: $00000367 VOL: 0
;PCODE: $00000368 VOL: 0
;PCODE: $00000369 VOL: 0
; 0000 01ED         sim900 = 100;            // если не успел, то перезагр.
;PCODE: $0000036A VOL: 0
;PCODE: $0000036B VOL: 0
; 0000 01EE         first = 1;
;PCODE: $0000036C VOL: 0
;PCODE: $0000036D VOL: 0
;PCODE: $0000036E VOL: 0
; 0000 01EF                               }
; 0000 01F0        }
;PCODE: $0000036F VOL: 0
; 0000 01F1 break;
;PCODE: $00000370 VOL: 0
; 0000 01F2 case 1:{
;PCODE: $00000371 VOL: 0
;PCODE: $00000372 VOL: 0
;PCODE: $00000373 VOL: 0
; 0000 01F3    if (Timer[0].flag == 0){
;PCODE: $00000374 VOL: 1
;PCODE: $00000375 VOL: 0
;PCODE: $00000376 VOL: 0
; 0000 01F4        rx_rd_index = symb+2;   // восстанавливаем индекс l; call ready
;PCODE: $00000377 VOL: 0
;PCODE: $00000378 VOL: 0
;PCODE: $00000379 VOL: 0
; 0000 01F5        gets(get_ready, 5);     // заполняем буфер
;PCODE: $0000037A VOL: 0
;PCODE: $0000037B VOL: 0
;PCODE: $0000037C VOL: 0
;PCODE: $0000037D VOL: 0
;PCODE: $0000037E VOL: 0
; 0000 01F6        if(memcmpf (get_ready, Ready, 5) == 0){ // и сравниваем его с нашим телефоном
;PCODE: $0000037F VOL: 0
;PCODE: $00000380 VOL: 0
;PCODE: $00000381 VOL: 0
;PCODE: $00000382 VOL: 0
;PCODE: $00000383 VOL: 0
;PCODE: $00000384 VOL: 0
;PCODE: $00000385 VOL: 0
;PCODE: $00000386 VOL: 0
;PCODE: $00000387 VOL: 0
; 0000 01F7           clean_rx_buff();     // очистка буфера
;PCODE: $00000388 VOL: 0
; 0000 01F8           soft_delay(2000,1);  // delay 2s softtim №1
;PCODE: $00000389 VOL: 0
;PCODE: $0000038A VOL: 0
;PCODE: $0000038B VOL: 0
;PCODE: $0000038C VOL: 0
;PCODE: $0000038D VOL: 0
; 0000 01F9           sim900 = 2;          // след.шаг
;PCODE: $0000038E VOL: 0
;PCODE: $0000038F VOL: 0
; 0000 01FA                                              }
; 0000 01FB        if(memcmpf (get_ready, Ready, 5) != 0){ // если не готов за 10с + 20мс
;PCODE: $00000390 VOL: 0
;PCODE: $00000391 VOL: 0
;PCODE: $00000392 VOL: 0
;PCODE: $00000393 VOL: 0
;PCODE: $00000394 VOL: 0
;PCODE: $00000395 VOL: 0
;PCODE: $00000396 VOL: 0
;PCODE: $00000397 VOL: 0
;PCODE: $00000398 VOL: 0
;PCODE: $00000399 VOL: 0
; 0000 01FC           clean_rx_buff();     // очистка буфера
;PCODE: $0000039A VOL: 0
; 0000 01FD           sim900 = 100;        // перезагрузка sim900
;PCODE: $0000039B VOL: 0
;PCODE: $0000039C VOL: 0
; 0000 01FE                                              }
; 0000 01FF                           }
;PCODE: $0000039D VOL: 0
; 0000 0200        }
;PCODE: $0000039E VOL: 0
; 0000 0201 break;
;PCODE: $0000039F VOL: 0
; 0000 0202 case 2:{
;PCODE: $000003A0 VOL: 0
;PCODE: $000003A1 VOL: 0
;PCODE: $000003A2 VOL: 0
; 0000 0203         ini_sim900();       // переход к автомату инициализации sim900
;PCODE: $000003A3 VOL: 0
; 0000 0204         if((Timer[1].flag == 0)&&(iniflag == 1)){ // если за 9сек. не инициализирован
;PCODE: $000003A4 VOL: 1
;PCODE: $000003A5 VOL: 0
;PCODE: $000003A6 VOL: 0
;PCODE: $000003A7 VOL: 0
;PCODE: $000003A8 VOL: 0
;PCODE: $000003A9 VOL: 0
;PCODE: $000003AA VOL: 0
;PCODE: $000003AB VOL: 0
;PCODE: $000003AC VOL: 0
;PCODE: $000003AD VOL: 0
;PCODE: $000003AE VOL: 0
; 0000 0205             sim900 = 100;                         // перезагрузка sim900
;PCODE: $000003AF VOL: 0
;PCODE: $000003B0 VOL: 0
; 0000 0206             first = 1;                            // первый вход в перезагрузку
;PCODE: $000003B1 VOL: 0
;PCODE: $000003B2 VOL: 0
;PCODE: $000003B3 VOL: 0
; 0000 0207                                                 }
; 0000 0208         if(iniflag == 0){                         // инициализирован
;PCODE: $000003B4 VOL: 0
;PCODE: $000003B5 VOL: 0
;PCODE: $000003B6 VOL: 0
; 0000 0209             sim900 = 3;                           // след.шаг
;PCODE: $000003B7 VOL: 0
;PCODE: $000003B8 VOL: 0
; 0000 020A                         }
; 0000 020B        }
;PCODE: $000003B9 VOL: 0
; 0000 020C break;
;PCODE: $000003BA VOL: 0
; 0000 020D case 3:{
;PCODE: $000003BB VOL: 0
;PCODE: $000003BC VOL: 0
;PCODE: $000003BD VOL: 0
; 0000 020E if(getchar() == '"'){       // ЖДЕМ КАВЫЧКУ (0x22)
;PCODE: $000003BE VOL: 0
;PCODE: $000003BF VOL: 0
;PCODE: $000003C0 VOL: 0
; 0000 020F    symb = --rx_rd_index;    // записываем индекс кавычки
;PCODE: $000003C1 VOL: 0
;PCODE: $000003C2 VOL: 0
;PCODE: $000003C3 VOL: 0
; 0000 0210    soft_delay(20,0);        // delay 20ms
;PCODE: $000003C4 VOL: 0
;PCODE: $000003C5 VOL: 0
;PCODE: $000003C6 VOL: 0
;PCODE: $000003C7 VOL: 0
;PCODE: $000003C8 VOL: 0
; 0000 0211    sim900 = 4;              // след.шаг
;PCODE: $000003C9 VOL: 0
;PCODE: $000003CA VOL: 0
; 0000 0212                     }
; 0000 0213        }
;PCODE: $000003CB VOL: 0
; 0000 0214 break;
;PCODE: $000003CC VOL: 0
; 0000 0215 case 4:{
;PCODE: $000003CD VOL: 0
;PCODE: $000003CE VOL: 0
;PCODE: $000003CF VOL: 0
; 0000 0216    if (Timer[0].flag == 0){
;PCODE: $000003D0 VOL: 1
;PCODE: $000003D1 VOL: 0
;PCODE: $000003D2 VOL: 0
; 0000 0217        rx_rd_index = ++symb;   // восстанавливаем индекс кавычки
;PCODE: $000003D3 VOL: 0
;PCODE: $000003D4 VOL: 0
;PCODE: $000003D5 VOL: 0
; 0000 0218        gets(get_phone, 12);    // заполняем буфер
;PCODE: $000003D6 VOL: 0
;PCODE: $000003D7 VOL: 0
;PCODE: $000003D8 VOL: 0
;PCODE: $000003D9 VOL: 0
;PCODE: $000003DA VOL: 0
; 0000 0219        if(memcmpf (get_phone, my_phone, 12) == 0) { // и сравниваем его с нашим телефоном
;PCODE: $000003DB VOL: 0
;PCODE: $000003DC VOL: 0
;PCODE: $000003DD VOL: 0
;PCODE: $000003DE VOL: 0
;PCODE: $000003DF VOL: 0
;PCODE: $000003E0 VOL: 0
;PCODE: $000003E1 VOL: 0
;PCODE: $000003E2 VOL: 0
;PCODE: $000003E3 VOL: 0
; 0000 021A           sim900 = 5;          // след.шаг
;PCODE: $000003E4 VOL: 0
;PCODE: $000003E5 VOL: 0
; 0000 021B           clean_get_phone();      // очистка буфера
;PCODE: $000003E6 VOL: 0
; 0000 021C           rx_buffer[symb] = '\0'; // <NULL> удаляем кавычку
;PCODE: $000003E7 VOL: 0
;PCODE: $000003E8 VOL: 0
;PCODE: $000003E9 VOL: 0
;PCODE: $000003EA VOL: 0
;PCODE: $000003EB VOL: 0
; 0000 021D           soft_delay(20,0);       // delay 20ms
;PCODE: $000003EC VOL: 0
;PCODE: $000003ED VOL: 0
;PCODE: $000003EE VOL: 0
;PCODE: $000003EF VOL: 0
;PCODE: $000003F0 VOL: 0
; 0000 021E                                                   }
; 0000 021F        if(memcmpf (get_phone, my_phone, 12) == 1) { // если не мой телефон пришел за 20мс
;PCODE: $000003F1 VOL: 0
;PCODE: $000003F2 VOL: 0
;PCODE: $000003F3 VOL: 0
;PCODE: $000003F4 VOL: 0
;PCODE: $000003F5 VOL: 0
;PCODE: $000003F6 VOL: 0
;PCODE: $000003F7 VOL: 0
;PCODE: $000003F8 VOL: 0
;PCODE: $000003F9 VOL: 0
;PCODE: $000003FA VOL: 0
; 0000 0220           clean_rx_buff();      // очистка буфера
;PCODE: $000003FB VOL: 0
; 0000 0221           clean_get_phone();    // очистка буфера
;PCODE: $000003FC VOL: 0
; 0000 0222           sim900 = 3;           // пред.шаг
;PCODE: $000003FD VOL: 0
;PCODE: $000003FE VOL: 0
; 0000 0223                                                   }
; 0000 0224                           }
;PCODE: $000003FF VOL: 0
; 0000 0225        }
;PCODE: $00000400 VOL: 0
; 0000 0226 break;
;PCODE: $00000401 VOL: 0
; 0000 0227 case 5:{
;PCODE: $00000402 VOL: 0
;PCODE: $00000403 VOL: 0
;PCODE: $00000404 VOL: 0
; 0000 0228 if (getchar() == '\n') {       // ожидаем LF (0x0A)
;PCODE: $00000405 VOL: 0
;PCODE: $00000406 VOL: 0
;PCODE: $00000407 VOL: 0
; 0000 0229     symb = --rx_rd_index;      // записываем индекс LF
;PCODE: $00000408 VOL: 0
;PCODE: $00000409 VOL: 0
;PCODE: $0000040A VOL: 0
; 0000 022A     soft_delay(10,0);          // delay 10ms
;PCODE: $0000040B VOL: 0
;PCODE: $0000040C VOL: 0
;PCODE: $0000040D VOL: 0
;PCODE: $0000040E VOL: 0
;PCODE: $0000040F VOL: 0
; 0000 022B     sim900 = 6;                // след.шаг
;PCODE: $00000410 VOL: 0
;PCODE: $00000411 VOL: 0
; 0000 022C                        }
; 0000 022D if (Timer[0].flag == 0) {      // если за 20мс не пришел конец строки
;PCODE: $00000412 VOL: 0
;PCODE: $00000413 VOL: 1
;PCODE: $00000414 VOL: 0
;PCODE: $00000415 VOL: 0
; 0000 022E     clean_rx_buff();           // очистка буфера
;PCODE: $00000416 VOL: 0
; 0000 022F     sim900 = 3;                // пред.шаг
;PCODE: $00000417 VOL: 0
;PCODE: $00000418 VOL: 0
; 0000 0230                         }
; 0000 0231        }
;PCODE: $00000419 VOL: 0
; 0000 0232 break;
;PCODE: $0000041A VOL: 0
; 0000 0233 case 6:{
;PCODE: $0000041B VOL: 0
;PCODE: $0000041C VOL: 0
;PCODE: $0000041D VOL: 0
; 0000 0234    if(Timer[0].flag == 0) { u8 i;
;PCODE: $0000041E VOL: 1
;PCODE: $0000041F VOL: 0
;PCODE: $00000420 VOL: 0
; 0000 0235      rx_rd_index = ++symb;             // восстанавливаем индекс c LF
;PCODE: $00000421 VOL: 0
;	i -> Y+0
;PCODE: $00000422 VOL: 0
;PCODE: $00000423 VOL: 0
;PCODE: $00000424 VOL: 0
; 0000 0236      gets(buff, 2);                    // заполняем буфер
;PCODE: $00000425 VOL: 0
;PCODE: $00000426 VOL: 0
;PCODE: $00000427 VOL: 0
;PCODE: $00000428 VOL: 0
;PCODE: $00000429 VOL: 0
; 0000 0237      if(memcmpf (buff, start, 2) == 0){// если смс == 03
;PCODE: $0000042A VOL: 0
;PCODE: $0000042B VOL: 0
;PCODE: $0000042C VOL: 0
;PCODE: $0000042D VOL: 0
;PCODE: $0000042E VOL: 0
;PCODE: $0000042F VOL: 0
;PCODE: $00000430 VOL: 0
;PCODE: $00000431 VOL: 0
;PCODE: $00000432 VOL: 0
; 0000 0238          SGPIO(write,pin_1,out,high);  // 1й пин конфиг. на вых. и вкл.
;PCODE: $00000433 VOL: 0
;PCODE: $00000434 VOL: 0
;PCODE: $00000435 VOL: 0
;PCODE: $00000436 VOL: 0
;PCODE: $00000437 VOL: 0
;PCODE: $00000438 VOL: 0
;PCODE: $00000439 VOL: 0
;PCODE: $0000043A VOL: 0
;PCODE: $0000043B VOL: 0
; 0000 0239          clean();                      // очистка смс буфера
;PCODE: $0000043C VOL: 0
; 0000 023A                                       }
; 0000 023B      else if(memcmpf (buff, stop, 2) == 0){   // если смс == 04
;PCODE: $0000043D VOL: 0
;PCODE: $0000043E VOL: 0
;PCODE: $0000043F VOL: 0
;PCODE: $00000440 VOL: 0
;PCODE: $00000441 VOL: 0
;PCODE: $00000442 VOL: 0
;PCODE: $00000443 VOL: 0
;PCODE: $00000444 VOL: 0
;PCODE: $00000445 VOL: 0
;PCODE: $00000446 VOL: 0
;PCODE: $00000447 VOL: 0
; 0000 023C          SGPIO(write,pin_1,out,low);   // 1й пин конфиг. на вых. и выкл.
;PCODE: $00000448 VOL: 0
;PCODE: $00000449 VOL: 0
;PCODE: $0000044A VOL: 0
;PCODE: $0000044B VOL: 0
;PCODE: $0000044C VOL: 0
;PCODE: $0000044D VOL: 0
;PCODE: $0000044E VOL: 0
;PCODE: $0000044F VOL: 0
;PCODE: $00000450 VOL: 0
; 0000 023D          clean();                      // очистка смс буфера
;PCODE: $00000451 VOL: 0
; 0000 023E                                           }
; 0000 023F      else if(memcmpf (buff, unlock, 2) == 0){ // если смс == 02
;PCODE: $00000452 VOL: 0
;PCODE: $00000453 VOL: 0
;PCODE: $00000454 VOL: 0
;PCODE: $00000455 VOL: 0
;PCODE: $00000456 VOL: 0
;PCODE: $00000457 VOL: 0
;PCODE: $00000458 VOL: 0
;PCODE: $00000459 VOL: 0
;PCODE: $0000045A VOL: 0
;PCODE: $0000045B VOL: 0
;PCODE: $0000045C VOL: 0
; 0000 0240            alarm = 0;                  // разблок.сигн.
;PCODE: $0000045D VOL: 0
;PCODE: $0000045E VOL: 0
;PCODE: $0000045F VOL: 0
; 0000 0241            for (i=0;i<11;i++){
;PCODE: $00000460 VOL: 0
;PCODE: $00000461 VOL: 0
;PCODE: $00000462 VOL: 0
;PCODE: $00000463 VOL: 0
;PCODE: $00000464 VOL: 0
;PCODE: $00000465 VOL: 0
;PCODE: $00000466 VOL: 0
;PCODE: $00000467 VOL: 0
;PCODE: $00000468 VOL: 0
;PCODE: $00000469 VOL: 0
; 0000 0242              text[i] = car_unlock[i];  // записать текст смс
;PCODE: $0000046A VOL: 0
;PCODE: $0000046B VOL: 0
;PCODE: $0000046C VOL: 0
;PCODE: $0000046D VOL: 0
;PCODE: $0000046E VOL: 0
;PCODE: $0000046F VOL: 0
;PCODE: $00000470 VOL: 0
;PCODE: $00000471 VOL: 0
; 0000 0243                              }
;PCODE: $00000472 VOL: 0
;PCODE: $00000473 VOL: 0
;PCODE: $00000474 VOL: 0
;PCODE: $00000475 VOL: 0
;PCODE: $00000476 VOL: 0
;PCODE: $00000477 VOL: 0
; 0000 0244            sim900 = 7;                 // отправитьс смс
;PCODE: $00000478 VOL: 0
;PCODE: $00000479 VOL: 0
; 0000 0245                                             }
; 0000 0246      else if(memcmpf (buff, lock, 2) == 0){ // если смс == 01
;PCODE: $0000047A VOL: 0
;PCODE: $0000047B VOL: 0
;PCODE: $0000047C VOL: 0
;PCODE: $0000047D VOL: 0
;PCODE: $0000047E VOL: 0
;PCODE: $0000047F VOL: 0
;PCODE: $00000480 VOL: 0
;PCODE: $00000481 VOL: 0
;PCODE: $00000482 VOL: 0
;PCODE: $00000483 VOL: 0
;PCODE: $00000484 VOL: 0
; 0000 0247            alarm = 1;                  // заблок.сигн.
;PCODE: $00000485 VOL: 0
;PCODE: $00000486 VOL: 0
;PCODE: $00000487 VOL: 0
; 0000 0248            for (i=0;i<11;i++){
;PCODE: $00000488 VOL: 0
;PCODE: $00000489 VOL: 0
;PCODE: $0000048A VOL: 0
;PCODE: $0000048B VOL: 0
;PCODE: $0000048C VOL: 0
;PCODE: $0000048D VOL: 0
;PCODE: $0000048E VOL: 0
;PCODE: $0000048F VOL: 0
;PCODE: $00000490 VOL: 0
;PCODE: $00000491 VOL: 0
; 0000 0249              text[i] = car_lock[i];    // записать текст смс
;PCODE: $00000492 VOL: 0
;PCODE: $00000493 VOL: 0
;PCODE: $00000494 VOL: 0
;PCODE: $00000495 VOL: 0
;PCODE: $00000496 VOL: 0
;PCODE: $00000497 VOL: 0
;PCODE: $00000498 VOL: 0
;PCODE: $00000499 VOL: 0
; 0000 024A                              }
;PCODE: $0000049A VOL: 0
;PCODE: $0000049B VOL: 0
;PCODE: $0000049C VOL: 0
;PCODE: $0000049D VOL: 0
;PCODE: $0000049E VOL: 0
;PCODE: $0000049F VOL: 0
; 0000 024B            sim900 = 7;                 // отправитьс смс
;PCODE: $000004A0 VOL: 0
;PCODE: $000004A1 VOL: 0
; 0000 024C                                           }
; 0000 024D      else {
;PCODE: $000004A2 VOL: 0
;PCODE: $000004A3 VOL: 0
; 0000 024E            for (i=0;i<11;i++){
;PCODE: $000004A4 VOL: 0
;PCODE: $000004A5 VOL: 0
;PCODE: $000004A6 VOL: 0
;PCODE: $000004A7 VOL: 0
;PCODE: $000004A8 VOL: 0
;PCODE: $000004A9 VOL: 0
;PCODE: $000004AA VOL: 0
;PCODE: $000004AB VOL: 0
;PCODE: $000004AC VOL: 0
;PCODE: $000004AD VOL: 0
; 0000 024F              text[i] = error_cmd[i];   // записать текст смс
;PCODE: $000004AE VOL: 0
;PCODE: $000004AF VOL: 0
;PCODE: $000004B0 VOL: 0
;PCODE: $000004B1 VOL: 0
;PCODE: $000004B2 VOL: 0
;PCODE: $000004B3 VOL: 0
;PCODE: $000004B4 VOL: 0
;PCODE: $000004B5 VOL: 0
; 0000 0250                              }
;PCODE: $000004B6 VOL: 0
;PCODE: $000004B7 VOL: 0
;PCODE: $000004B8 VOL: 0
;PCODE: $000004B9 VOL: 0
;PCODE: $000004BA VOL: 0
;PCODE: $000004BB VOL: 0
; 0000 0251            sim900 = 7;                 // отправитьс смс
;PCODE: $000004BC VOL: 0
;PCODE: $000004BD VOL: 0
; 0000 0252           }
;PCODE: $000004BE VOL: 0
;PCODE: $000004BF VOL: 0
;PCODE: $000004C0 VOL: 0
;PCODE: $000004C1 VOL: 0
; 0000 0253      clean_rx_buff();                  // очистка буфера приёма
;PCODE: $000004C2 VOL: 0
; 0000 0254                           }
;PCODE: $000004C3 VOL: 0
; 0000 0255        }
;PCODE: $000004C4 VOL: 0
; 0000 0256 break;
;PCODE: $000004C5 VOL: 0
; 0000 0257 case 7:{
;PCODE: $000004C6 VOL: 0
;PCODE: $000004C7 VOL: 0
;PCODE: $000004C8 VOL: 0
; 0000 0258         sms();                         // отправить смс
;PCODE: $000004C9 VOL: 0
; 0000 0259        }
; 0000 025A break;
;PCODE: $000004CA VOL: 0
; 0000 025B case 8:{
;PCODE: $000004CB VOL: 0
;PCODE: $000004CC VOL: 0
;PCODE: $000004CD VOL: 0
; 0000 025C          if (Timer[1].flag == 0) {
;PCODE: $000004CE VOL: 1
;PCODE: $000004CF VOL: 0
;PCODE: $000004D0 VOL: 0
;PCODE: $000004D1 VOL: 0
; 0000 025D              clean();               // очистка смс буфера
;PCODE: $000004D2 VOL: 0
; 0000 025E                                  }
; 0000 025F        }
;PCODE: $000004D3 VOL: 0
; 0000 0260 break;
;PCODE: $000004D4 VOL: 0
; 0000 0261                }
;PCODE: $000004D5 VOL: 0
; 0000 0262                 }
; 0000 0263 
; 0000 0264 if ((status_SIM) && (iniflag == 0) && (sim900 != 7) && (alarm == 1)){ u8 i; // опрос входов датчиков
;PCODE: $000004D6 VOL: 0
;PCODE: $000004D7 VOL: 0
;PCODE: $000004D8 VOL: 0
;PCODE: $000004D9 VOL: 0
;PCODE: $000004DA VOL: 0
;PCODE: $000004DB VOL: 0
;PCODE: $000004DC VOL: 0
;PCODE: $000004DD VOL: 0
;PCODE: $000004DE VOL: 0
;PCODE: $000004DF VOL: 0
;PCODE: $000004E0 VOL: 0
;PCODE: $000004E1 VOL: 0
;PCODE: $000004E2 VOL: 0
;PCODE: $000004E3 VOL: 0
;PCODE: $000004E4 VOL: 0
;PCODE: $000004E5 VOL: 0
;PCODE: $000004E6 VOL: 0
;PCODE: $000004E7 VOL: 0
; 0000 0265 //SGPIO(read,pin_1,0,0); // считать
; 0000 0266 switch (pin) {
;PCODE: $000004E8 VOL: 0
;	i -> Y+0
;PCODE: $000004E9 VOL: 0
;PCODE: $000004EA VOL: 0
; 0000 0267 case check: {
;PCODE: $000004EB VOL: 0
;PCODE: $000004EC VOL: 0
; 0000 0268    if (Timer[2].flag == 0) {
;PCODE: $000004ED VOL: 1
;PCODE: $000004EE VOL: 0
;PCODE: $000004EF VOL: 0
;PCODE: $000004F0 VOL: 0
; 0000 0269              once_open = 1;                 // вкл.контроль дверей
;PCODE: $000004F1 VOL: 0
;PCODE: $000004F2 VOL: 0
;PCODE: $000004F3 VOL: 0
; 0000 026A                            }
; 0000 026B    if (Timer[3].flag == 0) {
;PCODE: $000004F4 VOL: 0
;PCODE: $000004F5 VOL: 1
;PCODE: $000004F6 VOL: 0
;PCODE: $000004F7 VOL: 0
;PCODE: $000004F8 VOL: 0
; 0000 026C              once_crash = 1;                // вкл.контроль датч.удара
;PCODE: $000004F9 VOL: 0
;PCODE: $000004FA VOL: 0
;PCODE: $000004FB VOL: 0
; 0000 026D                            }
; 0000 026E    if (PINB.2 && once_open) {pin = open;    // дверь открыта
;PCODE: $000004FC VOL: 0
;PCODE: $000004FD VOL: 0
;PCODE: $000004FE VOL: 0
;PCODE: $000004FF VOL: 0
;PCODE: $00000500 VOL: 0
;PCODE: $00000501 VOL: 0
;PCODE: $00000502 VOL: 0
;PCODE: $00000503 VOL: 0
;PCODE: $00000504 VOL: 0
;PCODE: $00000505 VOL: 0
;PCODE: $00000506 VOL: 0
;PCODE: $00000507 VOL: 0
;PCODE: $00000508 VOL: 0
; 0000 026F                 once_open = 0;              // выкл.контроль
;PCODE: $00000509 VOL: 0
;PCODE: $0000050A VOL: 0
;PCODE: $0000050B VOL: 0
; 0000 0270                 for (i=0;i<11;i++){
;PCODE: $0000050C VOL: 0
;PCODE: $0000050D VOL: 0
;PCODE: $0000050E VOL: 0
;PCODE: $0000050F VOL: 0
;PCODE: $00000510 VOL: 0
;PCODE: $00000511 VOL: 0
;PCODE: $00000512 VOL: 0
;PCODE: $00000513 VOL: 0
;PCODE: $00000514 VOL: 0
;PCODE: $00000515 VOL: 0
; 0000 0271                 text[i] = open_door[i];     // записать текст смс
;PCODE: $00000516 VOL: 0
;PCODE: $00000517 VOL: 0
;PCODE: $00000518 VOL: 0
;PCODE: $00000519 VOL: 0
;PCODE: $0000051A VOL: 0
;PCODE: $0000051B VOL: 0
;PCODE: $0000051C VOL: 0
;PCODE: $0000051D VOL: 0
; 0000 0272                                   }
;PCODE: $0000051E VOL: 0
;PCODE: $0000051F VOL: 0
;PCODE: $00000520 VOL: 0
;PCODE: $00000521 VOL: 0
;PCODE: $00000522 VOL: 0
;PCODE: $00000523 VOL: 0
; 0000 0273                 soft_delay(60000,2);        // delay 60s
;PCODE: $00000524 VOL: 0
;PCODE: $00000525 VOL: 0
;PCODE: $00000526 VOL: 0
;PCODE: $00000527 VOL: 0
;PCODE: $00000528 VOL: 0
; 0000 0274                             }
; 0000 0275    if (PINB.3 && once_crash) {pin = crash;  // датчик удара
;PCODE: $00000529 VOL: 0
;PCODE: $0000052A VOL: 0
;PCODE: $0000052B VOL: 0
;PCODE: $0000052C VOL: 0
;PCODE: $0000052D VOL: 0
;PCODE: $0000052E VOL: 0
;PCODE: $0000052F VOL: 0
;PCODE: $00000530 VOL: 0
;PCODE: $00000531 VOL: 0
;PCODE: $00000532 VOL: 0
;PCODE: $00000533 VOL: 0
;PCODE: $00000534 VOL: 0
;PCODE: $00000535 VOL: 0
; 0000 0276                 once_crash = 0;             // выкл.контроль
;PCODE: $00000536 VOL: 0
;PCODE: $00000537 VOL: 0
;PCODE: $00000538 VOL: 0
; 0000 0277                 for (i=0;i<11;i++){
;PCODE: $00000539 VOL: 0
;PCODE: $0000053A VOL: 0
;PCODE: $0000053B VOL: 0
;PCODE: $0000053C VOL: 0
;PCODE: $0000053D VOL: 0
;PCODE: $0000053E VOL: 0
;PCODE: $0000053F VOL: 0
;PCODE: $00000540 VOL: 0
;PCODE: $00000541 VOL: 0
;PCODE: $00000542 VOL: 0
; 0000 0278                 text[i] = crash_door[i];    // записать текст смс
;PCODE: $00000543 VOL: 0
;PCODE: $00000544 VOL: 0
;PCODE: $00000545 VOL: 0
;PCODE: $00000546 VOL: 0
;PCODE: $00000547 VOL: 0
;PCODE: $00000548 VOL: 0
;PCODE: $00000549 VOL: 0
;PCODE: $0000054A VOL: 0
; 0000 0279                                   }
;PCODE: $0000054B VOL: 0
;PCODE: $0000054C VOL: 0
;PCODE: $0000054D VOL: 0
;PCODE: $0000054E VOL: 0
;PCODE: $0000054F VOL: 0
;PCODE: $00000550 VOL: 0
; 0000 027A                 soft_delay(60000,3);        // delay 60s
;PCODE: $00000551 VOL: 0
;PCODE: $00000552 VOL: 0
;PCODE: $00000553 VOL: 0
;PCODE: $00000554 VOL: 0
;PCODE: $00000555 VOL: 0
; 0000 027B                              }
; 0000 027C                     }
;PCODE: $00000556 VOL: 0
; 0000 027D break;
;PCODE: $00000557 VOL: 0
; 0000 027E case open: {
;PCODE: $00000558 VOL: 0
;PCODE: $00000559 VOL: 0
;PCODE: $0000055A VOL: 0
; 0000 027F             sms();                          // отправить смс
;PCODE: $0000055B VOL: 0
; 0000 0280            }
; 0000 0281 break;
;PCODE: $0000055C VOL: 0
; 0000 0282 case crash: {
;PCODE: $0000055D VOL: 0
;PCODE: $0000055E VOL: 0
;PCODE: $0000055F VOL: 0
; 0000 0283              sms();                         // отправить смс
;PCODE: $00000560 VOL: 0
; 0000 0284             }
; 0000 0285 break;
;PCODE: $00000561 VOL: 0
; 0000 0286 case cln: {
;PCODE: $00000562 VOL: 0
;PCODE: $00000563 VOL: 0
;PCODE: $00000564 VOL: 0
; 0000 0287            if (Timer[1].flag == 0) {
;PCODE: $00000565 VOL: 1
;PCODE: $00000566 VOL: 0
;PCODE: $00000567 VOL: 0
;PCODE: $00000568 VOL: 0
; 0000 0288            clean();     // очистка смс буфера
;PCODE: $00000569 VOL: 0
; 0000 0289            pin = check; // на первый шаг
;PCODE: $0000056A VOL: 0
; 0000 028A                                    }
; 0000 028B           }
;PCODE: $0000056B VOL: 0
; 0000 028C break;
;PCODE: $0000056C VOL: 0
; 0000 028D              }
;PCODE: $0000056D VOL: 0
; 0000 028E                                                                     }
;PCODE: $0000056E VOL: 0
; 0000 028F 
; 0000 0290 if ((!status_SIM) && (sim900 != 100) && (state)){ // включение, если нет статуса pwr
;PCODE: $0000056F VOL: 0
;PCODE: $00000570 VOL: 0
;PCODE: $00000571 VOL: 0
;PCODE: $00000572 VOL: 0
;PCODE: $00000573 VOL: 0
;PCODE: $00000574 VOL: 0
;PCODE: $00000575 VOL: 0
;PCODE: $00000576 VOL: 0
;PCODE: $00000577 VOL: 0
;PCODE: $00000578 VOL: 0
;PCODE: $00000579 VOL: 0
;PCODE: $0000057A VOL: 0
;PCODE: $0000057B VOL: 0
;PCODE: $0000057C VOL: 0
; 0000 0291       iniflag = 1;
;PCODE: $0000057D VOL: 0
;PCODE: $0000057E VOL: 0
; 0000 0292       sim900 = 0;
;PCODE: $0000057F VOL: 0
; 0000 0293       clean_rx_buff();
;PCODE: $00000580 VOL: 0
; 0000 0294       pwrkey_change(1,1200); // вкл.кнопку на 1200мс
;PCODE: $00000581 VOL: 0
;PCODE: $00000582 VOL: 0
;PCODE: $00000583 VOL: 0
;PCODE: $00000584 VOL: 0
;PCODE: $00000585 VOL: 0
; 0000 0295       state =0;
;PCODE: $00000586 VOL: 0
;PCODE: $00000587 VOL: 0
;PCODE: $00000588 VOL: 0
; 0000 0296                                                 }
; 0000 0297 
; 0000 0298 if ((sim900 != 100) && (Timer[2].flag == 0) && (state ==0)){ // завершить первое включение
;PCODE: $00000589 VOL: 0
;PCODE: $0000058A VOL: 0
;PCODE: $0000058B VOL: 0
;PCODE: $0000058C VOL: 0
;PCODE: $0000058D VOL: 1
;PCODE: $0000058E VOL: 0
;PCODE: $0000058F VOL: 0
;PCODE: $00000590 VOL: 0
;PCODE: $00000591 VOL: 0
;PCODE: $00000592 VOL: 0
;PCODE: $00000593 VOL: 0
;PCODE: $00000594 VOL: 0
;PCODE: $00000595 VOL: 0
;PCODE: $00000596 VOL: 0
;PCODE: $00000597 VOL: 0
;PCODE: $00000598 VOL: 0
; 0000 0299      pwrkey_change(0,900);   // выкл.кнопку
;PCODE: $00000599 VOL: 0
;PCODE: $0000059A VOL: 0
;PCODE: $0000059B VOL: 0
;PCODE: $0000059C VOL: 0
;PCODE: $0000059D VOL: 0
; 0000 029A      state = 1;
;PCODE: $0000059E VOL: 0
;PCODE: $0000059F VOL: 0
;PCODE: $000005A0 VOL: 0
; 0000 029B                                                            }
; 0000 029C 
; 0000 029D if (sim900 == 100) { // res_sim900(); сброс sim900
;PCODE: $000005A1 VOL: 0
;PCODE: $000005A2 VOL: 0
;PCODE: $000005A3 VOL: 0
;PCODE: $000005A4 VOL: 0
; 0000 029E switch (push){
;PCODE: $000005A5 VOL: 0
;PCODE: $000005A6 VOL: 0
; 0000 029F case 0:{
;PCODE: $000005A7 VOL: 0
;PCODE: $000005A8 VOL: 0
; 0000 02A0         key_repit(); // выкл.модуль sim900
;PCODE: $000005A9 VOL: 0
; 0000 02A1        }
; 0000 02A2 break;
;PCODE: $000005AA VOL: 0
; 0000 02A3 case 1:{
;PCODE: $000005AB VOL: 0
;PCODE: $000005AC VOL: 0
;PCODE: $000005AD VOL: 0
; 0000 02A4         if (Timer[2].flag == 0) { // ждём 2сек.
;PCODE: $000005AE VOL: 1
;PCODE: $000005AF VOL: 0
;PCODE: $000005B0 VOL: 0
;PCODE: $000005B1 VOL: 0
; 0000 02A5             push++;  // второе нажатие (вкл.)
;PCODE: $000005B2 VOL: 0
; 0000 02A6                                 }
; 0000 02A7        }
;PCODE: $000005B3 VOL: 0
; 0000 02A8 break;
;PCODE: $000005B4 VOL: 0
; 0000 02A9 case 2:{
;PCODE: $000005B5 VOL: 0
;PCODE: $000005B6 VOL: 0
;PCODE: $000005B7 VOL: 0
; 0000 02AA         key_repit(); // вкл.модуль sim900
;PCODE: $000005B8 VOL: 0
; 0000 02AB        }
; 0000 02AC break;
;PCODE: $000005B9 VOL: 0
; 0000 02AD case 3:{
;PCODE: $000005BA VOL: 0
;PCODE: $000005BB VOL: 0
;PCODE: $000005BC VOL: 0
; 0000 02AE         sim900 = 0;
;PCODE: $000005BD VOL: 0
; 0000 02AF         ATflag = 1;
;PCODE: $000005BE VOL: 0
;PCODE: $000005BF VOL: 0
; 0000 02B0         iniflag = 1;
;PCODE: $000005C0 VOL: 0
;PCODE: $000005C1 VOL: 0
; 0000 02B1         push = 0;
;PCODE: $000005C2 VOL: 0
; 0000 02B2        }
; 0000 02B3 break;
;PCODE: $000005C3 VOL: 0
; 0000 02B4              }
;PCODE: $000005C4 VOL: 0
; 0000 02B5                    }
; 0000 02B6          }
;PCODE: $000005C5 VOL: 0
;PCODE: $000005C6 VOL: 0
;PCODE: $000005C7 VOL: 0
; 0000 02B7                }
;PCODE: $000005C8 VOL: 0
;PCODE: $000005C9 VOL: 0
;PCODE: $000005CA VOL: 0
;
